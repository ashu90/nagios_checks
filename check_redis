#!/usr/bin/env perl
#vim:syntax=perl

use warnings;
use strict;
use Getopt::Long qw(:config gnu_getopt);
use Redis;
use Nagios::Plugin;

my $VERSION="1.1";
my $np;

$np = Nagios::Plugin->new(usage => "Usage: %s [--host|-H <host>] [--port|-p <port>] [--checks <type of check>] [ -c|--critical=<threshold> ] [ -w|--warning=<threshold>] [-?|--usage] [-V|--version] [-h|--help] [-v|--verbose] [-t|--timeout=<timeout>]",
                          version => $VERSION,
                          blurb => 'This plugin checks changes, connections, last save, or memory use',
                          license => "Brought to you AS IS, GPL v3",
                          shortname => "Redis",
                         );

$np->add_arg(spec => 'host|H=s',
             help => q(Check the host indicated in STRING),
             required => 0,
             default => 'localhost',
            );

$np->add_arg(spec => 'port|p=i',
             help => q(Use the TCP port indicated in INTEGER),
             required => 0,
             default => 6379,
            );

$np->add_arg(spec => 'checks=s',
             help => q(one of: changes, connections, lastsave, or memory),
             required => 0,
             default => 0,
            );

$np->add_arg(spec => 'critical|c=s',
             help => q(Exit with CRITICAL status if replication delay is greater than INTEGER),
             required => 0,
             default => 10,
            );

$np->add_arg(spec => 'warning|w=s',
             help => q(Exit with WARNING status if replication delay is greater than INTEGER),
             required => 0,
             default => 1,
            );

$np->getopts;
my $ng = $np->opts;

# manage timeout
alarm $ng->timeout;

# host & port
my $host = $ng->get('host');
my $port = $ng->get('port');
my $checks = $ng->get('checks');
my $o_time = time;

# verbosity
my $verbose = $ng->get('verbose');

my $redis;
eval {
	$redis = Redis->new( server => "$host:$port", debug => 0);
};
if ($@) {
	$np->nagios_exit( CRITICAL, "Can't connect to $host:$port" );
}

my $info = $redis->info();
my $code = OK;
my $msg = "Server is up, no checks configured";

$redis->ping || $np->nagios_exit( CRITICAL, "Can't ping server $host:$port" );

# check number of unsaved changes
if ($checks =~ /^changes$/i) {
  $code = $np->check_threshold(check => $info->{'changes_since_last_save'});
  $msg = ("Redis changes since save: " .
    $info->{'changes_since_last_save'} .
      ""
    );
}

# check number of connections 
if ($checks =~ /^connections$/i) {
  $code = $np->check_threshold(check => $info->{'connected_clients'});
  $msg = ("Current Connections: " .
    $info->{'connected_clients'} .
      ""
    );
}

# check seconds since last save
if ($checks =~ /^lastsave$/i) {
  my $o_lastsave = ( $o_time -= $info->{'last_save_time'});
  $code = $np->check_threshold(check => $o_lastsave);
  $msg = ("Time since last save: " .
    $o_lastsave .
      "s"
    );
}

# check memory usage 
if ($checks =~ /^memory$/i) {
  $code = $np->check_threshold(check => $info->{'used_memory'});
  $msg = ("Redis memory usage: " .
    int($info->{'used_memory'} / 1048576) .
      "MB"
    );
}

# TODO 
# Check slave status
#if ($checks =~ /^instance$/i) {
#  if ($info->{'role'} eq "slave") {
#	  if ($info->{'master_sync_in_progress'} != 0) {
#	    $msg = "redis replication sync is in progress";
#	    $code = CRITICAL;
#	  }
#  }
#  elsif ($info->{'role'} eq "master") {
#	  if ($info->{'connected_slaves'} == 0) {
#	    $msg = "This Redis instance has no slaves";
#	    $code = CRITICAL;
#	  }
#  }
#}

$np->nagios_exit( $code, $msg );
